// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 4byte_tracer.js
// bigram_tracer.js
// call_tracer.js
// evmdis_tracer.js
// noop_tracer.js
// opcount_tracer.js
// prestate_tracer.js
// trigram_tracer.js
// unigram_tracer.js

package tracers

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __4byte_tracerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x6f\xdb\x38\x10\x3d\x4b\xbf\x62\xd6\x97\x58\x88\x2c\x5b\xfe\x88\x3f\x82\x14\x08\xda\xa0\x5b\xa0\x8b\x2e\x90\x60\x2f\x8b\x3d\x8c\xc9\x91\xcc\x8d\x4c\x0a\xe4\xc8\x75\x92\xe6\xbf\x2f\x48\xc9\x89\x9d\xa6\x87\x3d\x49\xa2\x86\x6f\xde\xcc\xbc\x47\x0e\x87\x30\x5d\x3f\x30\xdd\x59\x14\x64\xc1\x11\x5a\xb1\x21\x07\x85\xb1\xed\x8f\x81\x92\xa4\x59\x15\x8a\xac\x4b\x01\xb5\x04\x61\xaa\x8a\x04\x3b\xe0\x0d\x6d\x43\x60\x6d\x1c\x0f\x6a\x6b\x04\x39\xa7\x74\x99\xc5\xc3\x21\x7c\xe1\x93\x40\xd8\x12\x6f\x8c\x74\x70\x04\x07\x58\x19\x5d\xc2\x77\xc5\x9b\x10\xe2\xd4\x23\x81\x29\xda\xf7\xa6\xae\x2b\x45\x12\x24\x32\xa6\xe0\x8c\xc7\x44\xb0\xb4\x23\xeb\x48\x82\x53\xa5\x46\x6e\x2c\x81\x40\x0d\x6b\x82\x2d\xb2\xd8\x90\x04\x2c\x51\x69\xc7\x3f\x01\x7a\x1c\x4f\xcc\xe3\xdc\xec\x71\x5b\x57\xb4\xf2\xef\x00\x1f\x40\xd2\xba\x29\x33\xf6\x2d\xb8\xb3\xa8\x1d\x0a\x56\x46\xf7\xa1\x37\xda\x8f\xf3\x29\xcd\x96\x73\x9a\xcc\x24\x8e\x16\x93\x8b\xe5\xb8\x98\x4d\x16\x17\xf9\x34\xa7\x8b\x65\x31\x9d\xd3\x72\x3e\x59\x8f\xc5\xec\x82\xe6\xb8\x18\xcd\x27\xeb\x9c\x70\xb4\x28\xe4\x7c\x36\xcf\x69\x29\xa9\x97\xc2\x53\x00\xb6\x2b\xe8\x1d\x75\xba\xf7\x9c\xb4\xd9\x9f\xda\x07\xc0\x68\x3f\x9e\x4b\x31\x5e\xce\x69\x90\x8f\x17\x2b\xc8\xd3\xd7\x3f\x93\x85\x10\xd3\xc5\x24\x1f\x8c\x56\x30\x3e\x5a\x9f\x8d\xa7\xc5\x64\xb1\x58\x0e\x96\x17\xa7\x1b\x50\x16\xb3\x65\xb1\x5c\x0e\xc6\x8b\x37\x50\x62\xbc\xc8\x65\xbe\x24\x0f\x95\xb7\xcb\xcf\xf1\x53\x1c\x0d\x87\xa0\xa4\x03\x2c\x4b\x4b\x25\x32\xb5\x53\x0b\x8c\xc3\x8f\xc2\x34\x5a\x66\x71\xe4\xdf\x57\xf0\xf4\x9c\xc6\x61\x8f\xc0\xaa\xba\x7b\xa8\x09\x2c\x71\x63\xb5\x83\xb3\x02\x2b\x47\x67\x41\x17\xda\xe8\x81\x0f\x70\x29\x18\x1b\xf0\x6a\xa2\xfb\x81\xd2\x92\xf6\x21\xc0\x2f\x15\xca\x3a\x86\x1a\x2d\x6e\x03\x22\x16\x4c\x16\xce\x76\x58\x35\x74\x96\x82\xca\x28\x83\x2d\x6d\xfd\x50\xd1\x72\x16\x47\x87\x94\x2b\x28\x1a\xdd\x4e\xca\xd4\x8e\x6d\xf2\x14\x47\x91\xfb\xae\x58\x6c\x8e\x16\x04\x3a\x82\xde\xc7\xeb\xaf\x5f\x7b\x2b\x78\xfd\xf8\xf8\xed\xd3\x4d\x6f\x15\x47\x91\x4f\x59\xa2\x97\xb6\x94\x36\x85\x1d\x56\x69\x9b\xae\x7b\xb8\xc7\xf0\x62\x1a\x3e\x3c\xdd\xa3\xdf\xd6\xd6\x0b\x93\x4b\x18\x0e\xc1\x31\x8a\x7b\xa8\xd9\x02\x9b\x76\x5b\xfc\x92\xfa\xd3\xcd\xd7\x9b\xcf\xd7\x77\x37\x27\x14\x6e\xef\xae\xef\xbe\x7c\x6c\x97\x7e\x26\xf1\x3f\xf2\x8f\x7f\x95\x3f\x8a\x9e\xe3\x97\xa8\x30\x93\xcb\x38\x3a\x4c\xcd\xb1\xb1\x04\x0e\x77\x14\x46\x50\xaa\x1d\x69\xf0\x63\xe9\xac\x19\x7c\xee\x1d\xe3\x1d\x94\xc5\x51\x88\x3f\xea\xb7\x92\x69\x30\x57\xe8\xf0\x0e\x2d\xdc\xd3\x03\x5c\x41\xaf\x07\xe7\xc0\xe6\x77\xda\xf7\x95\x4c\xe0\x1c\x7a\x03\xbf\xe2\x23\x2f\xe3\x28\xe2\x8d\x72\x99\x92\xee\xef\x7b\x7a\xf8\x07\xae\xe0\xf4\xfb\x1c\x72\xf8\xf1\x03\xf2\x13\x9a\x54\x83\x72\xa0\xf4\xce\xdc\x93\x0c\x92\xf1\x07\xc0\x03\x98\x5a\x18\xe9\xc9\x63\xeb\xf4\xbf\xfe\x00\xda\x93\x68\x98\x5c\xa0\x4b\xf5\x11\xdb\xca\x94\x29\xc8\x75\x02\x9e\xed\x70\x08\xb7\xf7\xaa\x06\xd4\x07\x14\xd7\xc2\xa0\x25\xd0\x86\x41\x69\x26\xab\xb1\x0a\xd2\x76\x5d\x7d\x82\x0f\x7c\x0f\xea\xf3\xa8\x99\xa9\x33\x36\xb7\x6c\x95\x2e\xfb\x49\xe2\x6b\x54\x05\xf4\x7f\x13\xdc\xe6\xea\xda\x7f\xd9\x0d\xe3\x38\x75\x6d\x69\x20\xcc\xb6\x56\x15\x85\xf2\x04\x7a\xaa\x2e\x05\xde\x18\x47\x81\xcc\xbf\x8d\x63\x28\x50\x8b\x17\xa2\x1d\xbe\x72\x7f\x5a\xea\x36\xcb\x3e\x9b\x6b\x29\x2d\x39\x17\x18\x05\x25\x64\xde\x66\xfd\x3c\x79\x25\x97\x5f\x24\x49\xf2\x2b\x52\x9f\x91\x37\x64\x4f\x0b\x07\x49\x8c\xea\xa5\x7e\xa5\x6f\x1f\xe1\x0a\xde\x64\x10\xec\xa7\x96\x64\xc1\xab\xdf\x8a\xfe\x4b\x07\x42\xf8\x87\x2b\x98\x76\x29\x5b\x88\x6f\x45\xf1\x1e\xc6\x9b\xfd\xad\x4c\x82\xe2\x42\x45\x5e\xf4\xf6\x21\x73\x95\x12\xd4\x0f\x20\x69\x87\x75\x0e\xd3\x24\x0d\xd4\x06\xd3\xa4\xab\xe7\x20\x9d\x02\x9b\x8a\x8f\xb5\xf3\x7d\x43\x3a\x48\x05\x05\x37\x58\x75\x72\x51\x46\xfb\x0b\x02\xf5\x41\x51\x85\x2f\x3a\x8b\xa3\xb0\xff\x5d\x0d\xc1\x21\x85\x25\xf7\x5e\x0e\xdf\x3c\x9f\xe7\x20\xae\x8d\x77\xd9\x9a\xbc\xc1\x98\x2c\x32\x49\x30\xbb\xce\x62\xdd\xa1\x19\xe0\xda\xb3\xd0\xf7\xbf\x03\xee\x2e\x2e\x7f\x7b\x84\x4b\x35\x6a\xd7\x8f\x48\x09\xde\xbf\x8a\xfa\x60\x66\xd3\xf8\xf3\xd3\xcf\xd0\x1b\x18\xb0\x72\xa6\x9b\x8a\xe0\x7d\xa6\x74\xdd\x70\x56\x91\x2e\x79\x73\x3c\xa1\xa3\xa6\xb7\x9d\x7e\x09\x4e\x61\x94\x86\x46\xbf\xdd\x3e\x98\x26\xa7\xa7\xcc\xc1\xcf\xad\x83\x9f\xe3\xff\x02\x00\x00\xff\xff\x70\x7d\x91\xc7\x5c\x08\x00\x00")

func _4byte_tracerJsBytes() ([]byte, error) {
	return bindataRead(
		__4byte_tracerJs,
		"4byte_tracer.js",
	)
}

func _4byte_tracerJs() (*asset, error) {
	bytes, err := _4byte_tracerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4byte_tracer.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x20, 0xe1, 0xce, 0xcf, 0x6, 0xc9, 0xc, 0x97, 0x12, 0x67, 0xe, 0x21, 0x6d, 0x8a, 0xee, 0x7c, 0x16, 0x41, 0x4f, 0xac, 0x83, 0x4d, 0xd3, 0x54, 0xc4, 0x17, 0xae, 0xed, 0x48, 0x69, 0xae, 0xca}}
	return a, nil
}

var _bigram_tracerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xbd\x6e\xdb\x30\x10\xde\xf3\x14\xdf\x66\x1b\x4e\x9d\x76\x75\xa0\xad\x6b\x91\xa1\x40\x97\xa2\x03\x2d\x1d\x25\xc2\x2c\x4f\x20\x4f\x6a\x8c\xc0\xef\x5e\x90\xd4\x0f\x55\xa4\x08\x27\x4a\xf7\xfd\xf1\xee\xde\x1e\x00\xe0\xe9\x09\x9d\x09\x02\x13\x20\x1d\xa1\xe6\xc1\x09\xf9\x00\xd6\xe0\xbe\xe6\x86\x70\x31\xad\x57\xbf\x43\x42\x47\xe8\x19\x6f\xf7\xc7\x99\x6b\x55\x90\x97\x3e\xb2\xe3\x0d\xdc\x93\x57\x62\xd8\xa5\x7a\x2e\x9e\xb1\xdb\x2d\x78\x7a\xa5\x7a\x88\x00\x34\xd4\x4b\x17\x6d\x26\xe2\xc2\xf8\x1a\x0b\x67\x7c\x5e\x38\x41\x28\x39\x18\x37\xf2\x95\x1a\x68\xf6\xa0\x91\xfc\x6d\x4e\x28\x9d\x92\x94\xfe\xc7\xb7\xc9\x80\xc2\x29\xb1\x23\xf5\x0c\x3d\xb8\x3a\x7a\xee\x2d\xb7\x8f\x68\x2e\x07\xe4\xb7\xc7\x33\x2a\x0f\xee\x51\xc1\x72\x7b\xe2\xfe\x24\xfc\x5d\xbc\x71\xed\xfe\xf0\xbc\xc1\xe4\xb8\x19\xd6\x52\x0e\x59\x62\x8c\xc6\x7e\xc2\x54\x90\xce\x84\xd3\xf2\x96\xc3\xea\x36\xab\x5d\xe9\x86\x02\xf6\xd2\x1f\x77\x9f\x76\x47\xee\x9f\x37\xc8\xa8\x99\x30\xb1\xed\x3f\xaf\x74\xfb\xf5\x8f\x54\x3c\x5b\xc0\xf1\xb8\x95\xb8\x6f\xbe\xc8\x06\xc2\x47\x12\xa8\xf0\xe5\x7f\x22\xeb\xad\xc8\x8e\x0a\x65\xf2\xed\xe3\x51\xe5\xd6\xe5\xfa\xba\x38\x5a\x0d\x56\xca\xa9\xfe\xe9\xc8\xa5\x21\xaa\x5a\x06\x65\x8b\x4d\x61\x0d\xe5\xe6\x59\x6b\x65\xec\x34\xdc\x24\xf1\xee\x74\x57\x1b\x4f\xe1\x3d\x1f\x65\x6d\xf2\xca\xa2\x01\x9d\x1a\x09\x17\x22\x07\x23\x71\x83\xa9\x01\x8f\xe4\xa1\x5c\x03\x4f\x32\x78\x17\x66\xc5\x48\xd3\xc6\x29\x3b\x6b\xb3\x4e\xff\xc4\xab\xda\xb8\x36\x47\xcb\xa5\x22\x5b\x2d\xaf\xe5\xd6\x65\xcd\xb5\xf1\x4b\x77\xee\x0f\x7f\x03\x00\x00\xff\xff\x18\xa9\x5a\x2a\x97\x03\x00\x00")

func bigram_tracerJsBytes() ([]byte, error) {
	return bindataRead(
		_bigram_tracerJs,
		"bigram_tracer.js",
	)
}

func bigram_tracerJs() (*asset, error) {
	bytes, err := bigram_tracerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bigram_tracer.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0x9c, 0x2, 0xba, 0x5c, 0x41, 0x65, 0x55, 0xd6, 0xad, 0x4a, 0xa4, 0xab, 0x56, 0x66, 0xa6, 0x0, 0x77, 0x18, 0x74, 0xb9, 0xf5, 0x11, 0xe7, 0x35, 0x3c, 0x6c, 0x46, 0x6, 0xb3, 0xe4, 0x50}}
	return a, nil
}

var _call_tracerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x51\x73\xdb\x38\xee\x7f\xb6\x3f\x05\xda\x87\x8d\x3d\x75\x6d\xb7\xdd\x7f\x1f\x9c\xbf\xf7\x26\x93\x7a\xf7\x3a\x93\xbb\xec\xb4\xd9\xdd\x87\x4e\x1e\x68\x09\xb2\xd9\x50\xa4\x96\xa4\xec\xf8\xba\xf9\xee\x37\x00\x29\x59\xb2\x95\xd4\xd7\x9b\xbb\xd9\x7b\xc9\x44\x22\x00\x81\xc0\x0f\x3f\x80\xf4\x64\x02\x89\x50\xea\xc6\x8a\x04\x2d\x48\x07\x02\xb2\x52\x29\x58\x2a\xb3\xd5\xe0\xad\xd0\x4e\x24\x5e\x1a\xfe\x9f\x44\xfc\x5a\x78\xc0\x7b\x7a\xf2\x0e\x84\x4e\xc1\x62\x61\x2c\xfd\xaf\x54\x7f\x32\x01\xbf\x46\x90\xda\xa3\xd5\x42\xb1\x6d\x07\xb9\x48\x11\x96\x3b\x10\x4d\x83\x23\x10\xca\xe8\x15\x6c\xa5\x5f\x83\xd0\x3b\x28\x1d\x66\xa5\x02\xa9\x33\x63\x73\x41\x22\xe3\xfe\x97\x7e\x2f\x7a\xe8\xbc\x48\xee\xc8\x41\xb2\x9f\x94\xd6\xa2\xf6\x60\x31\x29\xad\x93\x1b\x64\x11\x08\x32\x26\x63\x99\xc5\xaf\x7f\x03\xbc\xc7\xa4\x0c\x96\x7a\xb5\x91\x19\x7c\xfa\xf2\x70\x3b\xea\xb3\xe9\x14\x5d\x82\x3a\xc5\x94\xf7\x77\xe7\x60\xbb\x46\xbf\x46\x0b\x5b\x3c\xdb\x20\x7c\x2e\x9d\x6f\xc8\x64\xd6\xe4\x20\x34\x98\xd2\x53\x28\x1a\xd1\x91\xda\x1b\x36\x28\xe8\x7f\x8d\x96\x3d\x1a\xf7\x7b\xb5\xf2\x0c\x32\xa1\x1c\xc6\xef\x3a\x8f\x05\xed\x46\xea\x8d\xb9\x23\xcb\xc6\x02\x6e\xd0\xee\xc0\x14\x89\x49\x31\xc4\x99\xf6\x51\x6f\x03\xdd\xb8\xdf\x23\xbd\x19\x64\xa5\xe6\xcf\x0e\x94\x59\x8d\x20\x5d\x0e\xe1\x4b\xbf\x47\x66\x2f\x45\xe1\x4b\x8b\x1c\x4f\xb4\xd6\x58\x07\x32\xcf\x31\x95\xc2\xa3\xda\xf5\x7b\xbd\x8d\xb0\x61\x01\xe6\xa0\xcc\x6a\xbc\x42\xbf\xa0\xc7\xc1\xf0\xbc\xdf\xeb\xc9\x0c\x06\x61\xf5\xd9\x7c\x0e\xa5\x4e\x31\x93\x1a\xd3\x60\xbe\xe7\xd7\xd2\x8d\x33\x51\x2a\x5f\x7f\x97\x94\x7a\x16\x7d\x69\x35\xfd\xfb\x10\xbc\xf8\x0d\xc1\x68\xb5\x83\x44\x90\x2b\x4b\x53\x7a\x70\x3b\xe7\x31\x8f\x9b\x73\x23\xc8\x84\xa3\x10\xca\x0c\xb6\x08\x85\xc5\x97\xc9\x1a\x29\x77\x3a\xc1\xe8\xa5\xdb\x39\x4e\xea\x1c\xe8\x6b\x63\x53\x8c\xbd\xf9\x7b\x99\x2f\xd1\x0e\x86\xf0\x1d\x4c\xef\xb3\xe9\x10\xe6\x73\xfe\xa7\xf2\x3d\xea\x44\x7f\xc9\x8a\x29\xe2\x46\x59\xff\xa3\xb7\x52\xaf\xc2\x5e\xa3\xaf\xef\x33\x10\xa0\x71\x0b\x89\xd1\x0c\x6a\xca\xca\x12\xa5\x5e\x41\x62\x51\x78\x4c\x47\x20\xd2\x14\xbc\x09\xc8\xab\x71\xd6\xfe\x24\x7c\xf7\x1d\x7f\x6b\x0e\x67\x97\x1f\x16\x17\x37\x8b\xb3\x86\x13\x52\x5f\x67\x59\xf4\x83\x75\xc7\x05\xe2\xdd\xe0\xd5\x70\xbc\x11\xaa\xc4\xeb\x2c\x78\x14\x65\x17\x3a\x85\x79\xd4\x79\x71\xa8\xf3\xba\xa5\x43\x4a\x93\x09\x5c\x38\x87\xf9\x52\xe1\x71\xed\xc5\xe2\xe4\x3a\x75\xde\x58\x64\xa0\x25\x26\x2f\x14\x12\x80\xaa\xaf\xc6\x48\xb3\xc7\x3d\xbf\x2b\x70\x06\x00\x60\x8a\x11\xbf\x20\xd8\xf3\x0b\x6f\xfe\x8a\xf7\x9c\x8e\x2a\x5a\x04\xa0\x8b\x34\xb5\xe8\xdc\x60\x38\x0c\xe2\x52\x17\xa5\x9f\xb5\xc4\x73\xcc\x8d\xdd\x8d\x9d\x92\x09\x0e\x78\x6b\xa3\xb0\xd3\x4a\x67\x25\xdc\x7b\x4d\x3a\x11\x94\x3f\x09\x37\xd8\x2f\x5d\x1a\xe7\x67\xd5\x12\x3d\x54\x6b\x1c\x0b\x52\x3b\x9b\xde\x9f\x1d\x47\x6b\x3a\xdc\x27\xfd\xd5\xdb\x21\xa9\x3c\x9c\xd7\x50\xae\x19\x61\x5c\x94\x6e\x3d\x60\xe4\xec\x57\xf7\x55\x3f\x07\x6f\x4b\xec\x44\x3a\xa3\xe7\x18\x39\x0e\x55\x46\xb4\xe1\x6d\x99\x30\x82\x56\x82\x49\x85\x8b\x5a\x10\xc9\xba\x72\xc9\x31\xf7\xc6\x3c\x0a\xa4\x8f\x8b\xab\x1f\xdf\x2d\x3e\xde\x7c\xf8\xe5\xf2\xa6\x09\x27\x85\x99\x27\xa7\xda\x7b\x50\xa8\x57\x7e\xcd\xfe\x93\xb9\xf6\xea\x27\xd2\x79\xf9\xea\x36\xbc\x81\x79\x47\x75\xf7\x9e\xd6\x80\x4f\xb7\x6c\xfb\xe1\x38\x7c\x6d\xd1\x10\xcc\x2f\x01\x44\xa6\x78\x68\x72\x44\x47\xd9\xe5\xe8\xd7\x26\x65\x1e\x4c\x44\xa0\xd2\x2a\x8a\xa9\xd1\x78\x72\xf1\x0d\xaa\xea\xbb\xb8\xba\x3a\x83\x3f\xfe\x80\xc6\xf3\xe5\xf5\xbb\x45\xf3\xdd\xbb\xc5\xd5\xe2\xa7\x8b\x9b\xc5\xa1\xec\xc7\x9b\x8b\x9b\xf7\x97\xfc\x76\x18\xa3\x32\x99\xc0\xc7\x3b\x59\x30\xa1\x32\x4d\x99\xbc\x90\x0a\x1b\xfe\xba\x11\xf8\xb5\x71\x08\x44\x76\xdc\x2f\x32\xa1\x93\x8a\xc7\x5d\x95\x34\x6f\x28\x65\xa6\xaa\x95\x63\x2a\x68\x02\x75\x58\xa7\x51\xba\x9f\x2d\xc6\x8f\xa6\x03\x6f\x2a\xbf\xf6\x01\x0d\x19\x61\xae\x63\x92\x19\x9c\xbe\x49\xf8\x0b\x4c\x61\x06\xaf\x22\x93\x3c\x41\x55\xaf\xe1\x05\x99\xff\x06\xc2\x7a\xd3\xa1\xf9\xe7\xa4\x2d\x6f\x58\xb8\x12\xf7\xe6\xbf\x4f\x67\xa6\xf4\xd7\x59\x36\x83\xc3\x20\x7e\x7f\x14\xc4\x5a\xfe\x0a\xf5\xb1\xfc\xff\x1d\xc9\xef\xa9\x8f\x50\x65\x0a\x78\x76\x04\x91\x40\x3c\xcf\x0e\xea\x20\x06\x97\xa7\x19\xb6\x06\xf3\x47\xc8\xf6\x75\x1b\xc3\x8f\xb1\xc5\xbf\x45\xb6\x9d\x53\x19\xcd\x5e\xed\xb9\x6b\x04\x16\xbd\x95\xb8\x41\x90\xfe\xcc\xb1\x49\x9a\x4f\xcd\x56\xe8\x04\xc7\xf0\x1b\x06\x8b\x1a\x91\xc9\x25\xce\xb3\x34\x8e\xf0\x88\x47\x33\xa9\xd4\x7b\xce\x11\x3c\x76\x5a\x84\x5c\xec\x60\x89\x34\x7f\xdd\xed\x60\x25\x1c\xa4\x3b\x2d\x72\x99\xb8\x60\x8f\x67\x59\x8b\x2b\x61\xd9\xac\xc5\xdf\x4b\x74\x1e\x53\x06\xb2\x48\x7c\x29\x94\xda\xc1\x4a\x6e\x50\xb3\xf6\xe0\xf5\x9b\xe9\x14\x9c\x97\x05\xea\x74\x04\x6f\xdf\x4c\xde\x7e\x0f\xb6\x54\x38\x1c\xf7\x1b\x34\x5e\x6f\x35\x66\x83\x16\x22\x7a\xde\x61\xe1\xd7\x83\x21\xfc\xf0\x48\x3f\x78\x84\xdc\x3b\x65\xe1\x25\xbc\xba\x1d\x93\x5f\xf3\x16\x6e\x43\x26\x01\x95\xc3\x68\x6d\x32\x81\x9b\xeb\x77\xd7\x83\x3b\x61\x85\x12\x4b\x1c\xce\xe0\xa6\x8a\xd5\x56\xc4\x81\x9f\x92\x02\x85\x12\x52\x83\x48\x12\x53\x6a\x4f\x81\xaf\x66\x77\xb5\x23\x7e\x3f\xf3\x95\xbd\xb5\xd8\x20\xc9\xa1\x73\x15\xdd\x73\xd6\xc8\x1d\x91\x93\x36\x48\xed\x64\x8a\x8d\xac\x10\x3b\x18\xa6\xe6\x28\xb1\x95\x4a\x55\x06\x73\xe3\xe8\x23\x4b\x84\xad\xa5\x73\x86\x93\x3a\x21\x38\x40\x8a\x14\x6d\x07\x46\x83\x00\x65\x3c\x1d\x18\xb8\xc6\x41\xd8\x95\x1b\x07\xbe\xa7\xcf\x12\xe7\x68\xb3\x1d\xb7\x81\xdc\x84\x2a\x4f\xf4\x07\xe3\x80\x06\xbc\x97\xce\xf3\x00\x49\x5e\x4a\x07\x01\xc9\x52\xaf\x46\x50\x98\x82\x79\xfa\xc4\x59\xf2\xc3\xe2\xd7\xc5\x87\xba\xf9\x9f\x9e\xc4\x6a\xc4\x7f\x5e\x9f\x80\xc0\xd2\xf1\xc2\x63\xfa\xbc\x63\x66\xef\x00\xd4\xfc\x11\x40\x91\xfd\x7d\x6f\xfc\xb9\xb1\x1d\x25\x9c\xdf\x27\x66\x85\xe1\xf8\xd2\x74\xc0\x95\xca\xbb\x03\xee\x3e\x24\x07\x53\x54\x1d\x82\x9c\x62\xda\x21\x62\xef\x98\xac\x63\xc0\x7d\x13\x78\x02\x82\x4c\x83\x00\x78\xbd\x9a\xd0\x44\xe0\x7c\xf6\xd0\x94\x9e\x92\x4e\x5d\x7a\x4f\x71\x2b\xe1\x7e\x71\x9c\xdb\x48\x72\x4b\xb9\x7a\xaf\xfd\xa0\x5a\x7c\xaf\xe1\x25\x54\x0f\x44\xdd\xf0\xb2\x55\x2b\x1d\x1c\xd8\x4b\x51\xa1\x47\xd8\x9b\x38\x87\x83\x57\x64\x28\x6c\x9a\x43\x63\xd1\x1f\xb7\xe0\x69\xb4\x46\x61\x79\x66\xd1\x8f\xf1\xf7\x52\x28\x37\x98\xd6\x23\x41\xd8\x81\x37\xdc\xc4\xe6\x75\x1b\xab\xfa\x1c\xe9\xb4\x86\x8c\x68\x30\xa8\xc5\x68\x54\x6a\xe9\x32\xf4\xa6\x14\x9f\xb4\x10\x4d\x44\x72\xa8\x33\x16\xe1\xd7\x35\x65\xf6\x9a\x02\xf0\xbc\x6e\xfb\x99\x90\xaa\xb4\xf8\xfc\x1c\x3a\xc8\xc5\x95\x36\x13\x09\xe7\xd2\x21\xf0\x11\xd4\x81\x33\x39\xae\xcd\x36\x38\xd0\x45\x51\xc7\xe0\xa8\x71\x70\xd0\x24\x48\x8c\x2a\xbe\x74\x62\x85\x0d\x70\xd4\x01\xaf\x12\xd5\x79\x2e\xfe\x66\xe8\xbc\xa8\x1f\xbf\x82\xa2\xf0\x95\xaf\x42\xe3\x29\x6c\x74\x66\xf9\x68\x96\xa9\x84\x78\xa2\x69\x3c\x54\xae\x86\x81\xa3\x46\xce\xbf\x92\xf7\xff\x4c\xe2\x43\xe6\xe3\xdf\x53\x0b\xed\x50\x36\xec\xb1\x2d\x1c\x76\xba\x1f\x62\xbe\x8e\x82\x7a\xf5\x31\x00\x3c\x36\x1f\x11\x54\xf5\x67\x4c\xfc\x1e\xae\x3c\xd2\xd0\x53\x61\x71\x23\x4d\x49\xdd\x0a\xff\x97\xce\x7f\xf5\x7c\xf7\xd0\xef\x3d\xc4\x3b\x2f\x4e\x5f\xf3\xd2\x6b\xbb\xc6\x30\x64\x85\xd1\xa8\xd1\x2b\x0c\x37\xd2\x78\x15\x46\x08\x71\xe3\x7e\x8f\xf5\x9f\xb8\xfc\x8a\xf5\xee\x4d\x41\xbd\x3f\xb6\x22\x65\x51\xa4\xbb\xba\xfb\x8d\xc2\xd4\x01\x6b\xa1\xd3\x78\xf2\x10\x69\x2a\xc9\x1e\x63\x91\x3c\x14\x2b\x21\x75\xbf\x33\x8c\x5f\x6d\xb9\x5d\xc8\x38\x1a\x64\x9b\x5d\x33\x9e\x18\xe9\x78\xc7\x1e\xf7\x4f\xe8\x8e\x07\xb5\x74\x78\x8f\x17\xaf\x02\x8d\x76\x65\xce\x63\x2f\x88\x8d\x90\x4a\xd0\x51\x8b\xc7\x29\x9d\x42\xa2\x50\x68\x1e\x9d\x28\x79\x66\x83\xd6\xf5\x4f\x00\xf9\xb7\x60\xfc\x80\x1c\xab\xc7\x18\x8e\xd3\x6b\xf6\xd4\x8a\x0d\xdb\xff\x51\x09\xef\x23\xbc\x1a\xe1\x0d\x95\x25\xbd\x83\x42\xd0\x18\xda\x3f\xad\xa4\x78\x40\x22\x99\x1f\x60\xda\x18\xc2\xff\x2c\x45\x76\x0c\xb1\xab\x7a\x18\x8b\x9b\xf7\xc6\x8c\x40\xa1\xe0\x23\x11\xc4\xc3\x4d\x35\x7c\x3e\x75\x42\xab\xaa\x37\x8c\x6f\x47\xe5\xcb\x97\x58\x6b\xac\xae\x3b\xc2\x1c\xbf\x44\xd4\x20\x3d\x5a\x41\x87\x1f\x42\x57\xfc\xa5\x80\xbc\x74\x6c\x8e\xf3\x22\xa9\xe8\xa2\xe1\x78\x6d\x4f\xfd\x59\xea\xd5\xb8\xdf\x0b\xef\x1b\xf5\x9e\xf8\xfb\x7d\xbd\x87\x66\xc8\x9a\xf1\x02\xa0\x3e\xff\x27\xfe\x9e\x67\x46\x3e\x23\x1f\x5c\x02\xd0\x1a\xbd\x0a\x07\xe8\x83\x23\x3f\x2b\xc6\x63\xff\xe1\xcd\x22\xad\xf1\xbb\x16\xc0\x59\x74\x25\x5c\x30\x73\x50\x12\xfe\xfe\xb8\x22\x2a\x05\x2a\x86\x59\xb7\x02\x2d\x75\x28\x1d\x5c\x43\x90\x30\xbf\x0a\xab\xa1\xb1\xcf\x9a\xab\xe1\x55\xdc\xa8\xcc\x1b\xb1\x91\x39\xc7\xe6\xe1\xbc\x9b\xe4\xa6\x15\x1e\xbb\xc9\x8c\x62\x5e\x03\xf6\x11\xd5\xe6\xc1\xe2\x58\xe4\x29\xaa\x64\xeb\x15\xb3\x3d\xa2\xca\xd6\x1b\xa3\x87\xbf\x3f\xdd\x64\x2d\xdc\x74\xb1\x25\xd3\x65\x24\xf2\x4c\x94\x0b\x91\xad\x0c\x04\x54\x07\x5f\x19\xd1\xf2\x1f\x18\x2d\x36\xeb\xa7\x5a\x02\x8b\xe1\x87\x05\x1e\x48\xa9\x7c\xcc\x92\x9b\x7f\xe9\xe8\xcc\xb8\xaf\x8b\x14\x9d\xb4\x98\x42\x26\x51\xa5\x60\x52\xb4\x7c\x22\xfd\xec\x8c\x0e\x3f\x21\xa1\x95\x64\x31\xfc\x54\x06\x37\x6b\x2a\x4d\x32\xaa\x65\x82\x7e\x07\x19\x0a\xfe\x2d\xc8\x1b\x28\x84\x73\x90\xa3\xa0\x33\x68\x56\x2a\xb5\x03\x63\x53\x24\xe3\xf5\xa1\x8c\x4a\xd2\x40\xe9\xd0\x3a\xd8\xae\x4d\x6c\x93\x3c\xa5\x15\x34\x74\x4a\x3f\x8a\xf7\x2e\xd2\x15\x4a\xec\x40\x7a\x6a\xc9\x71\x53\xcd\x2a\xad\x7f\x80\xe1\x5f\x71\x0c\x75\xdd\xe3\x12\xad\xce\x75\xed\x1a\xe5\xd7\xf4\xd4\xae\xce\x78\xae\x69\xd7\xe5\xfe\x46\xaa\x5d\x84\x55\xdb\x68\x57\x5a\xb3\x09\xb5\xcb\x89\x57\xf8\xa9\x5d\x48\x8d\x79\x99\x17\x18\x1c\xb5\x02\x3f\x1d\x94\x16\x7b\x19\x6b\x2b\xfc\xdc\x58\x8b\xf3\xd3\x28\x02\x86\xb2\x38\xa0\xe0\xdc\xe1\x8e\x98\x38\xc4\xa8\xd1\x56\xc2\x8b\x4f\x77\xb8\xbb\xed\xee\x22\x11\x8e\x0d\xb9\xba\x6d\x54\x90\x0e\x6b\x4f\x14\x72\xed\x85\x9c\x4f\xcf\x41\xfe\x7f\x53\xa1\xea\x7c\x20\x5f\xbc\xa8\xbe\xd9\x5c\xff\x24\x6f\xab\xea\xac\x11\x7f\xb0\x3e\x6c\x79\x14\x6b\x24\xc8\x50\x51\xf4\x1f\xfa\xff\x0c\x00\x00\xff\xff\x87\x00\x70\xa9\x7b\x1e\x00\x00")

func call_tracerJsBytes() ([]byte, error) {
	return bindataRead(
		_call_tracerJs,
		"call_tracer.js",
	)
}

func call_tracerJs() (*asset, error) {
	bytes, err := call_tracerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "call_tracer.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe0, 0xe1, 0xf6, 0xd3, 0x59, 0x5a, 0xd4, 0x8d, 0x9a, 0x9, 0x17, 0x76, 0x96, 0x54, 0x65, 0x6a, 0xfc, 0x1e, 0xde, 0xb5, 0x53, 0x92, 0x4d, 0xe3, 0x60, 0xdd, 0xb9, 0xe0, 0xb3, 0xc9, 0x94, 0x1c}}
	return a, nil
}

var _evmdis_tracerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x4d\x6f\xe2\x48\x10\x3d\xdb\xbf\xa2\x94\x13\x28\x8c\xe3\xf6\x07\x01\x67\x59\x69\x94\xa0\xd5\xac\xe6\x23\x9a\x30\x7b\x41\x1c\x1c\x68\x83\x15\xe3\xb6\xdc\x6d\x66\xb2\x11\xff\x7d\x55\x5d\x65\x3e\x02\xd9\xd1\x48\x93\x43\x57\x4c\xd7\x7b\xf5\xba\x5e\xb9\x7d\x75\x05\x72\xb3\x5e\xe4\x7a\x52\xa7\x73\x59\x43\x2d\x4d\x53\x97\x1a\x74\x93\x65\xf9\x5c\x96\x06\xf2\x32\x53\xf5\x3a\x35\xb9\x2a\x21\xab\xd5\x1a\x52\x30\x98\x0b\x46\x41\x25\x6b\xdc\x64\x8a\x77\xda\x3c\x17\xd2\xbd\xba\x82\x45\xae\x53\xad\xe5\xfa\xb1\x78\xf6\xdc\x17\xd7\xd1\x26\x9d\x3f\x25\x30\x7d\x51\x95\x4e\x60\x3a\xdb\xce\x7a\xae\xeb\x94\x55\xa3\x57\x52\x27\xf0\xe2\x27\xe0\xf7\x40\x24\x20\x7a\x10\xd8\x35\xb4\x6b\x64\xd7\xd8\xae\x7d\xbb\x5e\xdb\x75\x60\xd7\xa1\x5d\x85\x4f\x81\xd0\x82\xd2\x04\xe5\x09\x4a\x14\x94\x19\x50\x66\xc0\x75\xa8\x50\x40\x95\x02\x2a\x15\x50\xad\x80\x58\x42\x4a\x89\x88\x25\x22\x96\x98\x58\x62\x62\x89\x29\x25\x26\x96\x98\x05\xc7\xf6\x3c\x31\xb1\xc4\xd7\xf4\x44\x2c\x31\xb1\xf4\xe9\xc8\x7d\x02\xf4\xf9\x88\x04\xe8\x93\xf8\x3e\x01\xfa\x04\x18\x10\x60\x40\x65\x07\x01\x3d\x85\x14\x88\x65\x40\x65\x07\x7d\x0a\x54\x76\x40\x2c\x03\x62\x19\x92\xf8\xa1\xb0\x7b\x43\xaa\x37\xa4\x7a\x43\xee\x6a\xdb\x56\xee\xab\xcf\x8d\xf5\x03\x8e\x21\xc7\x88\x63\xcc\x91\x3b\xef\x73\xeb\x7d\xee\xbd\xcf\x7c\x3b\x9f\x98\x4f\x30\x9f\x60\x3e\xc1\x7c\x82\xf9\x5a\x27\x5b\x2b\x5b\x2f\xd9\x4c\xc1\x6e\x0a\xb6\x53\xb0\x9f\x82\x0d\x15\xec\xa8\x60\x4b\x05\x7b\x2a\x02\xe6\x0b\x06\x09\x04\x18\x87\x09\x84\x3d\x10\xa1\x9f\x40\x84\x51\x24\x10\x63\x0c\x12\xe8\x63\x0c\x13\xb8\xc6\x18\x25\x30\xc0\x18\x27\x30\xc4\x88\x7c\x38\xb5\x21\x12\x22\x63\x88\x0a\x91\x32\x44\x89\xc8\x19\xa1\x46\x24\x8d\x50\x24\xb2\x46\xa8\x12\x69\x23\x94\x89\xbc\x51\x44\x3a\xa2\x98\x74\x44\x7d\xd2\x11\x5d\x93\x0e\x9c\x3e\x0b\x18\x92\x0e\x9c\x3f\xd4\x81\x03\x88\x3a\xec\x04\xa2\x0e\x3b\x83\xa8\xc3\x4e\x21\x52\xe2\x1c\x5a\x1d\x76\x12\x91\x14\x67\xd1\xea\xb0\xd3\x88\xb4\x76\x1e\x91\x97\x27\x52\xf4\x05\xc7\x80\x63\xc8\x31\xb2\x31\x88\xf8\x2d\x8a\xf8\x35\x8a\xf8\x3d\x8a\x42\xde\xe7\x3c\xfb\x12\x6c\xf1\x3d\xbf\xba\x82\x5a\xea\xa6\x30\x90\x6b\xc8\xcb\x8d\x7a\x92\x0b\xf8\xbe\x92\x25\xa4\x45\x01\x66\x25\x41\x55\x73\xb5\x90\x1a\x56\xe9\x46\xc2\xa3\x94\x25\xe4\x46\xd6\xa9\x91\x0b\x50\x1b\x59\x43\x5a\x2e\xda\x9b\xc9\xd2\x21\x26\xcb\xcb\xb4\x68\x89\x55\x66\x7f\xc3\x8b\x29\x2f\x97\x9e\xeb\xd0\xef\x09\x64\x4d\x39\xc7\xab\xab\xd3\x85\x17\xa6\x00\xb3\xca\xb5\x67\xaf\xa4\xa9\x3f\xf3\x54\xa5\x6f\xa0\xd5\x99\xa5\xe7\x64\x22\x75\x3a\x37\x4d\x5a\x80\xfc\x21\xe7\x8d\xbd\x0b\x55\x06\x69\xc9\xca\x21\x4b\xf3\x42\x7b\xae\x63\xf1\x07\x55\x0b\xb5\xec\xc1\xe2\x11\x8b\xb7\x25\xb4\x91\xd5\x61\x85\x4c\xd5\x20\x37\xb2\x7e\x6e\xb9\xcc\x2a\x35\xb6\xe4\x3f\x9f\xb8\x9c\x44\x6a\xc4\x9d\x65\x76\x1d\x67\x93\xd6\x90\xd5\xe9\x5a\xc2\xe8\xf0\x74\xfb\x7f\xbd\x42\x96\x4b\xb3\x82\x77\x20\x66\x37\x2e\x23\x64\x5d\xab\x1a\x46\x50\xa8\xa5\xb7\x94\x66\x8c\x8f\x9d\xee\x8d\xeb\x38\x79\x06\x1d\xbb\x4b\xf4\x8e\xe5\x9e\x5e\xd8\x9f\x2e\x66\x30\x22\x28\x66\x6e\x41\x16\x5a\x02\x02\x98\xe6\x4e\x56\x66\xd5\xe9\xc2\xe8\x50\x0a\xd7\x67\x3a\x55\xe1\x47\x05\x46\xf4\xe4\xa8\x2a\x01\xfc\x43\x02\x55\x79\x46\x7d\x6e\xd6\x8f\xb2\xee\x74\x7b\x76\x7b\x81\x84\x90\xc0\x31\x3f\xed\xb5\x36\x4f\x67\xf6\x79\x8b\x92\xac\x7a\xab\x18\xbd\x6d\x4f\xfe\x27\xf8\x5c\xdd\x9e\xbd\xaa\xe5\x46\x55\x30\x82\x5d\xe2\xf4\x04\x42\xcd\x42\x44\xa6\xea\x0e\xa2\x72\x18\x81\x7f\x03\x39\xfc\x41\x67\xe3\x2f\xd8\x94\xd8\x3c\x55\xcd\x6e\x20\xbf\xbc\xec\x5a\x90\xc3\xbf\x92\x46\x0f\x53\x6d\x8f\xa8\x21\x95\x94\x4f\x9d\xbc\xeb\x19\xf5\x60\xea\xbc\x5c\x76\x44\xbf\x6b\x7b\xef\x6c\x71\xd1\xdf\x73\x33\xa7\x7c\xdb\x12\x4e\xea\xf2\x19\xe6\xa9\x96\x70\x71\xfb\xfe\xe3\xc7\x8b\x04\xf6\x0f\xb7\x5f\xee\xc6\x17\xc9\xee\x90\x79\xa9\x4d\x5a\x1b\xb6\xf8\xa0\x6e\xd8\xf5\x36\x69\xd1\xc8\x2f\x19\xf9\xbd\x4b\xcf\xff\x95\xa7\xd9\xd1\x49\x36\x19\x38\xbd\x58\xa6\xda\x8e\xc3\x2b\x80\xff\x26\xc0\xa8\x73\xf9\xe2\xb8\x0d\xc7\x10\xcb\x74\x0e\x15\x1c\xa0\x5e\x61\xf2\xb2\x6a\xcc\x0e\xb3\x96\x6b\x55\x3f\x7b\xba\xc8\xe7\xb2\xc3\x3d\xe9\xed\x9a\x73\xc9\xe7\x7e\x45\xb1\x9f\xf5\xb2\x29\x8a\xe3\x3d\xba\x47\xde\xd8\x54\x15\xf5\x64\xca\xb3\x73\xf0\x12\xd8\x11\xa0\x3c\xae\xf6\x58\xcb\xf4\xe9\x66\xef\xe8\xdd\xf8\xe3\xf8\xaf\xf7\x93\xf1\x91\xb3\x0f\x93\xf7\x93\x0f\xb7\xf4\xd3\xcf\xbd\x0d\x7e\xc9\xdb\xd3\x49\xd8\x9f\xc3\x1e\x03\x4e\x46\xf0\xfc\x08\xfc\xf2\x0c\xfc\xd2\x10\xec\x0d\xfd\x1d\x8e\xfe\xbf\xa5\xbf\xdb\xd3\xaf\xe3\xc9\xb7\xaf\x9f\x0f\xac\x53\xcd\x19\xdb\x4e\xfb\xc5\xa9\xe7\x7d\x13\x27\xe9\x74\x7d\xf1\x27\xee\xcc\xe0\xab\xc6\xf4\x6c\xe9\xcb\x96\xf5\x0d\xbd\x0f\x93\x2f\xf7\xfb\xd9\xfb\xf6\xe1\xf6\xc3\xee\x52\xf9\x59\x0d\xbf\x07\xfe\x1b\xac\x7f\x7f\xfb\x74\x7f\x37\x7e\x98\x30\x53\xdb\xd9\x6a\xbe\x7b\x4d\x97\xd2\xdc\xdf\x76\x0e\xee\xc0\x3c\x6b\xef\xbf\x5c\xdf\x63\x9b\xdb\xdb\x6f\x87\x2e\x64\xb9\x83\x1f\x7d\x39\xe0\x1d\xf8\x3f\x62\xb9\xe7\xda\x5f\xee\xaf\x0d\xe3\x2f\x98\x25\xde\xfb\x7a\xf4\x21\xdd\x9f\xee\xf8\x1b\x44\x78\xd7\xd9\xba\x5b\xf7\xbf\x00\x00\x00\xff\xff\x8a\x9f\x81\x38\x49\x0d\x00\x00")

func evmdis_tracerJsBytes() ([]byte, error) {
	return bindataRead(
		_evmdis_tracerJs,
		"evmdis_tracer.js",
	)
}

func evmdis_tracerJs() (*asset, error) {
	bytes, err := evmdis_tracerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "evmdis_tracer.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x23, 0x62, 0xb5, 0xa3, 0x4e, 0x4e, 0x42, 0xef, 0xdd, 0xee, 0xb9, 0x23, 0x10, 0xad, 0x5a, 0xd2, 0x72, 0x10, 0xa7, 0x8f, 0xc9, 0x9d, 0x49, 0xb7, 0x62, 0x95, 0xb3, 0xf9, 0xf9, 0xe4, 0x66, 0xa6}}
	return a, nil
}

var _noop_tracerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xc1\x6a\x1b\x31\x10\x86\xcf\xd6\x53\xfc\xc7\x16\x8c\xf7\xde\xbe\x41\xa1\xa7\x96\xdc\x47\xda\x59\xaf\x1c\x45\xb3\x19\x8d\x36\x0e\x66\xdf\x3d\x48\x1b\x83\x0f\x21\x37\x31\xf0\x7f\xdf\x87\x86\x01\x59\x64\xf9\xaf\x14\x58\x11\x0b\x2e\xb5\x18\x6c\x66\x78\x52\xf6\x92\x19\x5e\x62\x62\x5d\x12\x19\x23\xc8\xc8\x50\x7e\xad\x51\x79\xc4\xa4\xf2\x02\xc2\x1f\x5a\xe9\x5f\xd0\xb8\x98\x1b\x06\x88\xbf\x70\x30\x98\xc0\x33\x6a\x21\x9f\x18\x54\x40\x30\xa5\x5c\x28\x58\x94\xdc\xde\x81\xf5\xe4\x6e\xee\x30\x0c\x28\xc6\x4b\x73\xc7\xbc\xca\x73\xe3\x8a\x82\x57\xd6\x77\xc8\xd2\x8d\x36\xd3\x1e\xf5\xf4\x17\x7c\xe5\x50\x8d\xcb\xc9\x1d\xda\xee\x17\xa6\x9a\x3b\xf4\x47\x92\xf3\x11\xa3\xff\x89\x1b\xb6\xa3\xeb\xe4\x89\x6a\xb2\x47\xf4\xdb\xcc\xb9\x93\x28\x58\xa5\xf4\x49\x6b\x49\x32\x81\xf2\x5d\x38\x51\x4c\xcd\xd0\xf7\xdf\x2b\x94\xcb\x57\x0e\x4a\xa9\x7b\x76\x60\xc1\x4c\x2b\xc3\x33\x67\x44\x63\x25\xe3\x11\xb2\xb2\x82\xf2\x08\x65\xab\x9a\x4b\xc7\xb5\xcd\x14\x33\xa5\x3b\x58\xa6\x7e\x6b\x3f\x16\xf3\xf9\xe4\x0e\xfb\xfd\x21\x2a\xd8\xf5\x1e\xb5\x93\x70\xdb\x7e\x63\x73\x9b\xfb\x08\x00\x00\xff\xff\x1c\x82\x94\xbd\xde\x01\x00\x00")

func noop_tracerJsBytes() ([]byte, error) {
	return bindataRead(
		_noop_tracerJs,
		"noop_tracer.js",
	)
}

func noop_tracerJs() (*asset, error) {
	bytes, err := noop_tracerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "noop_tracer.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x91, 0x1, 0xe1, 0x2d, 0xc0, 0xd1, 0x8b, 0xbc, 0x7d, 0x44, 0xd, 0x2f, 0xce, 0xd1, 0xff, 0xca, 0xed, 0xfc, 0x67, 0xc, 0x18, 0xb7, 0xd8, 0xfb, 0x9f, 0xfe, 0xed, 0x3f, 0xcb, 0x6d, 0xf7, 0xaa}}
	return a, nil
}

var _opcount_tracerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xb1\xae\xe2\x30\x10\x45\xeb\xf8\x2b\x6e\xb9\x2b\x50\xb2\x35\xfd\x96\x74\x2b\xfa\x49\x32\x26\x5e\xcc\x18\xd9\xe3\x2c\x08\xf1\xef\x2b\x3b\xe4\x29\x7a\xa2\x8c\x35\xf7\x9c\xb9\x93\xae\x43\xb8\x0d\x21\x8b\xfe\x89\x34\x70\x84\x4b\x20\x24\xba\xde\x3c\x43\x97\x27\x9d\x48\xf1\x37\x27\x45\x1d\x4c\xd0\x89\x21\xf9\xda\x73\x44\xb0\x70\x92\x34\xe6\x41\x5d\x90\x64\xba\x0e\x7c\xe7\x21\x2b\x8f\xe8\x1f\x75\xf2\xf7\xe9\x88\x9e\x6d\x88\x5c\x3f\x35\x92\x24\xaa\xe3\x50\x8e\x57\x27\xa4\x3c\xb6\xe6\x69\x9a\xae\x5b\x0c\x55\x7c\xf9\xee\x29\x9c\xad\xeb\x4b\xd4\x9a\xa6\xc6\x0e\xf8\xb5\x37\x95\x92\x94\x6f\xa5\x89\x93\x39\x5c\x78\x84\x0d\x11\x3c\x73\x7c\xd4\xb2\x23\x2f\x95\x0a\xfe\x74\x5c\x31\xa9\x35\x4d\xc9\x1d\x60\xb3\x54\xc3\x0f\x1f\xce\x7b\x8c\xfd\x4f\x3c\xa1\x93\x4b\x6d\xb5\xec\x76\x78\xbd\x35\x96\xb2\xd7\xad\xe7\xdf\xc4\x52\xb1\x34\x68\x26\xff\x46\x97\xa6\xc1\x82\x64\xb5\x5b\x72\xbe\xe8\x6a\xfe\xb3\x6f\x55\x44\x4e\x9f\x1c\xe4\x7d\xf5\x2c\xc0\x84\x89\x66\x46\xcf\x2c\x70\xca\xb1\x1c\x14\x61\xe6\x08\x92\x11\x91\x35\x47\x49\x15\x57\x32\xd6\x09\xf9\x15\x1c\xec\xfa\x53\x06\x27\xe7\xd6\x34\xcb\xfb\x66\xa9\x41\xef\xeb\x52\x0b\x69\x73\x0b\xbc\xcc\xcb\xfc\x0f\x00\x00\xff\xff\x80\xec\x28\x5c\x43\x02\x00\x00")

func opcount_tracerJsBytes() ([]byte, error) {
	return bindataRead(
		_opcount_tracerJs,
		"opcount_tracer.js",
	)
}

func opcount_tracerJs() (*asset, error) {
	bytes, err := opcount_tracerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "opcount_tracer.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x38, 0x2f, 0x1e, 0xcc, 0x32, 0x53, 0x47, 0x18, 0x2b, 0x80, 0xb0, 0x60, 0x78, 0xfd, 0x18, 0x96, 0x4a, 0x32, 0xe2, 0x5c, 0xc9, 0xb7, 0x7e, 0x43, 0xc8, 0xe0, 0x57, 0x10, 0x80, 0xaa, 0x2b, 0x64}}
	return a, nil
}

var _prestate_tracerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\xcf\x8f\x1a\xb9\x12\x3e\x77\xff\x15\xf5\xe6\x02\x28\xa4\x99\xbc\x43\x0e\x8c\x38\x10\x06\xbd\x17\x69\x36\xb3\x0a\x68\xb3\xbb\x51\x0e\x6e\xbb\x1a\x1c\x8c\x8d\x6c\x37\x3f\x14\xf1\xbf\xaf\xca\xed\x6e\x68\x02\x93\xec\xee\x9c\xa6\xed\xf2\x57\xe5\xfa\xaa\xbe\x32\x83\x01\x6c\x2c\x3a\xcf\x3c\xce\x2d\xe3\x68\xc1\x94\x7e\x53\x7a\x07\xae\x2c\x0a\xc9\x25\x6a\x0f\x52\x17\xc6\xae\x99\x97\x46\x83\x37\xc0\x2d\x32\x8f\xc0\x40\x19\xce\x14\xe0\x1e\x79\x19\xf6\x4c\x91\x0e\x06\xe0\x97\x08\xde\x32\xed\x18\x0f\xab\x85\x35\x6b\x60\xc0\x4b\xe7\xe9\x1f\xe7\x70\x9d\x2b\x14\xb0\x40\x8d\x4e\x3a\xc8\x95\xe1\xab\x2c\xfd\x96\x26\x67\xc1\x80\x74\x01\xa8\x36\xf2\x4b\xe6\x61\x87\x1d\x8b\x90\x97\x52\x09\xa9\x17\x59\x9a\xd4\xd6\x43\xd0\xa5\x52\xfd\x34\x40\x28\x63\x56\xe5\x66\xcc\xb9\x29\x43\xec\x5f\x91\xfb\x0a\xcc\x6d\x90\xcb\x42\xa2\x00\xd6\xec\x7a\x13\xb6\x1a\xbf\x26\x27\xfb\x2c\x4d\x5a\x30\x43\x28\x4a\x1d\xae\xd3\x65\x42\xd8\x3e\x88\xbc\xf7\x2d\x4d\x92\x2d\xb3\x84\x05\x23\xf0\xe6\xff\xb8\x0f\x9b\xbd\x87\x34\x49\x64\x01\x5d\xbf\x94\x2e\xab\x81\x3f\x33\xce\xbf\xc0\x68\x34\x82\x52\x0b\x2c\xa4\x46\xd1\x03\x82\x48\xae\x99\x55\x3b\x49\xce\x14\xd3\x1c\x87\xd0\xb9\xdf\x77\xe0\x15\x88\x3c\x5b\xa0\x7f\x57\xad\x56\xce\x32\x6f\x66\xde\x4a\xbd\xe8\xbe\x79\xdb\xeb\x87\x53\xda\x84\x33\x10\xcd\x3f\x98\xc6\xb8\xda\xe7\x46\x84\xed\x18\x73\x65\x35\x31\x22\x1a\x45\x2b\xe7\x8d\x65\x0b\x1c\xc2\xb7\x23\x7d\x1f\xe9\x56\xc7\x34\x39\xb6\xb2\x3c\xab\x8c\x6e\x64\x39\x42\x00\x6a\x6f\x0f\x60\x8a\x8a\x51\xb9\x45\xdd\x22\x20\xe0\xbd\x44\xc2\xac\x0e\xe5\x82\x84\x15\x1e\x7e\xcc\x04\x6d\x48\xb1\x6f\x36\x56\x78\xe8\x3d\xa4\x37\x29\xca\x62\xd0\x9f\xa5\xd8\x5f\xe7\x8b\x00\xb7\x4c\x35\x80\x55\xfe\x66\x84\x70\x8a\xab\x17\x7c\x07\x1f\x64\xfb\x9f\x11\xdc\xdd\xef\xef\xff\xe5\xdf\x5d\x8c\xe0\x4a\xc9\x5c\x84\xfd\x13\xa1\x1d\xdb\x7c\x5a\x74\xa5\xf2\xd4\x76\x52\x6f\xcd\x0a\x05\xec\x96\xc4\x93\x52\x81\x1a\xb3\xa1\xaa\x71\xb0\x64\x5b\x84\x1c\x51\x83\xf4\x68\x99\x47\x01\x66\x8b\x16\x98\x16\x60\xd1\x97\x56\xbb\x86\xce\x42\x6a\xa6\x6a\xe0\xc8\xbe\xb7\x8c\x57\xbd\x5b\xad\x9f\x71\xca\xfd\x3e\xb0\x19\xee\x38\x18\xc0\xd8\x03\xdd\x13\x36\x46\x6a\xdf\x87\x1d\x82\x46\x14\x24\x40\x02\x45\xc9\x7d\xc0\xeb\x6c\x99\x2a\xb1\x53\x89\x8c\x5f\x62\x75\xd4\x94\x1e\xed\xb9\x08\xf5\x43\x80\x6b\xb3\x45\x90\x1e\x72\xc6\x57\x10\x1b\xdf\x58\xb9\x90\x3a\x8d\x39\x6d\x35\x3d\x45\x94\x11\x70\x08\x2b\xd4\x0c\x71\x4f\x2b\xef\x02\xff\xb9\x5c\xbc\xd7\xfe\xa2\x88\xaa\xcc\xd7\x47\x7b\x5f\xb2\xd8\xc4\x99\x53\x92\x63\xf7\xbf\xbd\x3e\xbc\x79\xdb\x54\xa6\x37\x04\x05\x3f\x06\xf3\xe6\x36\x54\x7a\x59\x11\xd7\x8f\x05\x37\xa4\x24\xaf\x82\xd7\xcc\x95\x39\xd1\x51\xdd\x33\xe4\xb1\xad\x26\x0f\x2f\xe0\xb6\xef\x56\xe3\xc6\xd4\x64\x4c\x88\xdb\xa0\x15\x45\x8f\xc8\x2d\xae\x69\xba\x10\x0b\x9c\x29\x85\xb6\xe3\x20\x68\x57\x3f\x96\x53\xe0\x0b\xd7\x1b\x7f\xa8\x67\x8e\x67\x76\x81\xde\xfd\x38\xb0\x80\xf3\xfa\x75\x2d\xc5\x21\x15\x87\x0d\xc2\x68\x04\x9d\xc9\xc7\xe9\x78\x3e\xed\xc4\x66\x1a\x0c\xe0\x13\x05\xa0\x21\x57\x32\x17\xea\x00\x02\x15\x92\x2f\x8a\xcb\xe8\x90\xa2\x46\x9a\xfa\xc0\x1c\x30\x7d\x00\xdc\x4b\xe7\xa5\x5e\x40\xa5\x58\x3b\x53\x2a\x11\xe1\x42\x8f\x70\x56\x3a\xaa\xd6\x8b\x61\xe8\x0d\xe4\x08\x16\x49\xdf\x68\x0e\x85\x76\x63\x4a\x0a\x90\x3a\x36\x8d\x75\x1e\x36\x8a\x71\xcc\x08\xaf\x09\xe6\x36\xbf\x51\x99\xc9\xf5\xc7\xd0\x82\x01\xe8\x34\x68\x99\xa2\x41\x4d\xee\x1d\x74\x6b\x8c\x5e\x9a\x24\xb6\xb6\x3e\xc3\x7e\x38\x49\x82\xf3\xb8\x39\x17\x84\xc2\x58\xc0\x2d\x92\x94\x07\x35\xa8\x86\x32\xf9\xfa\xed\x97\xf8\x0a\x40\x97\xa5\x09\x9d\x3b\xeb\x6b\x65\x16\xed\xbe\x16\x55\x5a\x78\x69\x2d\xf1\xdf\x8c\x82\x82\x7a\xfc\x6b\xe9\x3c\xe5\xd4\x52\x7a\xa2\x5a\x5c\x13\xeb\x20\xcd\x34\xf5\x7b\xdf\x0f\x51\x9a\x9f\x61\x5e\x91\xbb\x38\x2d\x61\x27\x95\x82\x8d\xf1\xa8\xbd\x64\x4a\x1d\x88\x87\x9d\x35\x7a\x01\x4b\xb4\xd8\x07\x27\xc9\x2a\x28\x4e\x30\x95\x9a\xab\x52\x54\x65\x10\xea\x38\xe2\xb9\x10\xb3\xa2\x83\x3b\xe9\x97\x61\x7f\x8d\xce\xb1\x05\x66\x54\x49\x85\xdc\x57\x89\x91\x1a\x3a\x95\xc8\x75\x7b\x9d\xac\x09\xb2\x2d\x31\xca\x2c\xb2\xba\xc8\x48\xab\xc7\x42\x58\x74\xae\xdb\x8b\x9a\xd3\x30\xfb\x69\x89\x9a\x92\x0f\x1a\x77\xd0\x3c\x91\x18\xe7\xe8\x1c\x8a\x3e\x30\x21\x48\xda\x2e\x9e\x33\x69\x92\xb8\x9d\xf4\x7c\x09\xc1\x93\xd9\x9c\x7a\xb1\x17\xeb\x9f\x33\x87\x70\x37\xfd\x7d\x3e\x79\x7e\x9c\x4e\x9e\x7f\xfd\xe3\x6e\x08\xad\xb5\xd9\xfb\x3f\xa7\xcd\xda\xbb\xf1\xd3\xf8\xc3\x64\x7a\x37\x3c\xcd\xa1\xf6\x85\xbc\xa9\xaf\x40\x0e\x9d\x67\x7c\x95\x6d\x10\x57\xdd\xfb\xb6\x0e\x9c\x2e\x98\x24\xb9\x45\xb6\x7a\x38\x05\x53\x35\x68\xf4\x51\x4b\x2e\x8c\xe0\x66\xb2\x1e\x6e\x47\x33\x89\xf6\xdd\x5a\xc8\x4f\x4f\xa2\x20\x15\x2f\xc6\x31\x7e\x7a\x6a\x6e\x4e\x1f\x94\x8e\x66\xe1\x71\xfa\x34\xfd\xdf\x78\x3e\x6d\x59\xcd\xe6\xe3\xf9\xfb\x49\xb5\xf4\xb7\x53\xf4\xe6\xa7\x53\xd4\x99\xcd\xe6\xcf\x1f\xa7\x9d\x61\xfc\x7a\x7a\x1e\x3f\x76\xbe\x73\x18\xdf\x4d\x2f\x15\x99\x37\x9f\x8c\x15\xff\x84\xab\xb3\xb7\x43\xc1\xae\x3d\x1d\x82\x08\x71\x5f\x5e\xfc\x44\x00\xa6\x6b\xfd\x28\x98\x54\x24\x18\xe1\xfc\x55\xc5\x38\xa6\xc7\xf4\xaf\x00\x00\x00\xff\xff\x36\x30\x7f\xdf\xa3\x0c\x00\x00")

func prestate_tracerJsBytes() ([]byte, error) {
	return bindataRead(
		_prestate_tracerJs,
		"prestate_tracer.js",
	)
}

func prestate_tracerJs() (*asset, error) {
	bytes, err := prestate_tracerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prestate_tracer.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdc, 0xc8, 0xbd, 0x3d, 0x5, 0x0, 0xc0, 0xa6, 0x2d, 0xd6, 0x8d, 0x28, 0x5c, 0x61, 0x78, 0xe4, 0xfe, 0xf2, 0x78, 0x0, 0xc3, 0x75, 0xf8, 0x6c, 0xb7, 0x1c, 0xee, 0xa, 0x87, 0x89, 0xb3, 0x2b}}
	return a, nil
}

var _trigram_tracerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\xbb\x6e\xe3\x30\x10\xec\xf3\x15\x73\x95\x62\xd8\xe7\xc4\xad\x03\x75\x69\x0f\x29\x0e\xb8\xc6\x70\xc1\x48\x2b\x89\x30\x43\x12\xe4\x4a\x17\xc3\xf0\xbf\x1f\x48\xea\x69\x08\xa7\x4a\xd8\x9d\x9d\x99\x25\x87\xb7\x27\x00\x78\x79\x41\x23\x3d\x43\x7a\x70\x43\xf8\x12\x16\xa6\x02\x3b\x59\x3b\xf1\x85\xc2\xb4\x9a\xc9\xf9\x08\x0d\xb8\x23\x6e\xf7\xdd\x30\xa8\x84\xe7\x0f\x1b\x46\xc3\x1f\x8c\x25\x27\x58\x1a\x1d\xfb\xa9\xe9\x8f\x38\x65\xd9\x2e\xcb\xce\xbb\xb1\xfa\x4e\x96\x9b\x23\x5e\x53\xa5\xe7\xf2\x4c\x91\x49\xea\xce\x5c\xa8\x44\x65\x1c\xa8\x23\x77\x85\xb1\x85\x29\x09\xdc\x08\x8e\x16\xff\xfc\x02\x7d\x53\xd1\x32\xf9\x7d\x64\x08\xa3\x47\x54\xad\x2e\x82\xf8\xb3\x32\xf5\x0e\xe5\xe7\x06\xb7\x91\xbf\x13\x0e\x65\x50\x45\x0e\x65\xea\x7d\x4d\xc9\xc4\xf3\xe6\x6d\xc4\xc8\x0a\xcf\x09\xf3\x23\x07\x37\xd2\xef\x47\xaf\x9b\x89\x29\x7c\x63\xf3\xc3\x7a\xe4\xc3\x7e\x6f\xeb\x98\xf7\x5e\x36\x52\x2f\x31\x8e\xb8\x75\x7a\xaa\xdd\x17\x7e\x8d\xed\xcd\x1a\xbb\x67\xf3\x9b\x9d\xd4\xf5\xdc\x6f\xc0\x5c\xe8\x8a\x7c\xe1\xe7\xf4\x7a\xde\x66\x3f\xb3\xed\xa2\x76\x48\x35\x63\x97\xdb\x46\x4c\xb8\xd4\xd3\x85\xae\xe7\xb5\x25\xc7\xe6\x76\xbb\x66\x93\x94\x27\xfc\x6f\x0c\x39\x0e\x6b\x83\x0f\x8e\x1f\x77\x38\xcc\x0e\xf3\xa1\x81\x1c\xc3\x1a\x53\x0e\x2b\xd1\x2a\x9e\x87\xe7\x6f\x43\x3a\x66\x45\x14\xdc\x0a\xd5\xe7\x45\x1a\x1d\xb2\x2d\xf4\x10\xa9\x4a\x48\xd5\x67\x28\x52\xac\x86\x68\x92\x71\xe4\xd7\x74\x84\x52\x51\x2b\x91\x7a\x34\xa2\x23\x7c\x12\x69\x48\x0e\x0f\x82\x4a\x98\x8e\x1c\x84\x2e\xfb\x2b\xf7\x03\x63\x18\xab\xa4\x16\x6a\xe0\x0e\x4f\xaf\x21\xb0\x13\x85\xd4\x75\xb2\x96\x5a\x33\x6f\x05\x7f\xcf\xc3\x9d\x38\xa7\x93\x1f\x4f\xe7\xfe\xf4\x2f\x00\x00\xff\xff\x22\x4f\xca\x5c\xe3\x03\x00\x00")

func trigram_tracerJsBytes() ([]byte, error) {
	return bindataRead(
		_trigram_tracerJs,
		"trigram_tracer.js",
	)
}

func trigram_tracerJs() (*asset, error) {
	bytes, err := trigram_tracerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "trigram_tracer.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0xc2, 0xe6, 0x76, 0x2a, 0xbb, 0x21, 0xce, 0xd4, 0x93, 0xf5, 0x54, 0xd5, 0x81, 0xe9, 0x4a, 0xd5, 0x41, 0xd3, 0x6c, 0xaa, 0x8a, 0xc3, 0xd, 0xde, 0x29, 0xd8, 0x40, 0x64, 0x16, 0xc7, 0x37}}
	return a, nil
}

var _unigram_tracerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x41\x6f\xa3\x30\x10\x85\xef\xfc\x8a\x77\x24\x0a\x22\xd9\x6b\x56\xd9\x7f\xb0\xa7\x4a\xbd\x54\x3d\x38\x30\x06\xab\x8e\x07\xd9\x03\x4d\x15\xf1\xdf\x2b\x9b\x00\x69\x14\xd5\x27\xc4\xbc\x37\x6f\xe6\x9b\x6b\x06\x00\xbb\x1d\x5a\x13\x04\x26\x40\x5a\xc2\x59\x75\x60\x0d\xee\x2a\xae\x29\x40\x18\x15\xf7\x4e\xc8\x87\xa4\x8e\xd2\x03\xae\x63\x31\x7b\x1d\x77\x61\x92\x04\xb8\xfe\x7c\x22\x3f\xd9\x27\x79\xac\x1e\xb0\x5f\xd4\x41\xa8\x8b\x49\xc6\x0d\xfc\x41\x35\x34\x7b\xd0\x40\xfe\xeb\x16\x08\x69\x95\xa4\x39\x5e\xff\x83\x2e\x54\xf5\x42\xa1\x4c\xee\x68\x3d\x40\xf7\xae\x12\xc3\x2e\xb7\xdc\x14\xa8\x4f\x1b\x4c\x5b\xc4\x37\x28\x0f\xee\x70\x84\xe5\xa6\xe4\xae\x14\x7e\x11\x6f\x5c\x93\x6f\xfe\x2e\x1a\xa3\x91\x4b\x6b\x42\x19\x17\x79\xe3\xee\x7d\xb3\xfa\xe3\xfb\x51\xdb\x6e\x57\xe3\xb8\x7c\x91\x0d\x84\x5f\x5c\x38\xe2\xcf\x33\x5f\x12\x45\x20\x73\xdb\x15\xa2\x56\xbd\x95\x7b\x2e\x9f\x2d\xb9\x84\x41\x55\xd2\x2b\x7b\x43\x61\xd8\x45\xb8\xca\xcd\xb4\xb4\x32\xf6\x86\x27\xb5\x78\xca\x67\x2c\xb2\x39\xc7\x53\x78\x16\xa4\xac\x4d\x61\xf3\xd1\x5b\x35\x10\x4e\x44\x0e\x46\xc8\x2b\xa1\x1a\x3c\x90\x87\x72\x35\x3c\x49\xef\x5d\x98\x3b\x46\x9b\x36\x4e\xd9\xb9\x37\xeb\xf4\x4f\xbc\xaa\x8c\x6b\xa6\xd9\xa6\xd2\xdd\x70\x95\x5c\xee\x0f\x67\x74\xbe\xc0\xc1\x3f\xec\x1f\x6e\x32\x45\xae\x90\x1f\xe1\x8e\x45\x36\x66\xdf\x01\x00\x00\xff\xff\xe8\xa5\xe4\xd3\xcd\x02\x00\x00")

func unigram_tracerJsBytes() ([]byte, error) {
	return bindataRead(
		_unigram_tracerJs,
		"unigram_tracer.js",
	)
}

func unigram_tracerJs() (*asset, error) {
	bytes, err := unigram_tracerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "unigram_tracer.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x91, 0x40, 0xb3, 0xae, 0x9, 0x89, 0xbf, 0xff, 0x29, 0x46, 0x13, 0xa0, 0x21, 0x75, 0xc5, 0x87, 0xfe, 0x4e, 0xd3, 0xea, 0xc9, 0x98, 0x9b, 0x77, 0x27, 0x1b, 0x13, 0x8c, 0x48, 0x9a, 0x64, 0x37}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"4byte_tracer.js": _4byte_tracerJs,

	"bigram_tracer.js": bigram_tracerJs,

	"call_tracer.js": call_tracerJs,

	"evmdis_tracer.js": evmdis_tracerJs,

	"noop_tracer.js": noop_tracerJs,

	"opcount_tracer.js": opcount_tracerJs,

	"prestate_tracer.js": prestate_tracerJs,

	"trigram_tracer.js": trigram_tracerJs,

	"unigram_tracer.js": unigram_tracerJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"4byte_tracer.js":    {_4byte_tracerJs, map[string]*bintree{}},
	"bigram_tracer.js":   {bigram_tracerJs, map[string]*bintree{}},
	"call_tracer.js":     {call_tracerJs, map[string]*bintree{}},
	"evmdis_tracer.js":   {evmdis_tracerJs, map[string]*bintree{}},
	"noop_tracer.js":     {noop_tracerJs, map[string]*bintree{}},
	"opcount_tracer.js":  {opcount_tracerJs, map[string]*bintree{}},
	"prestate_tracer.js": {prestate_tracerJs, map[string]*bintree{}},
	"trigram_tracer.js":  {trigram_tracerJs, map[string]*bintree{}},
	"unigram_tracer.js":  {unigram_tracerJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
